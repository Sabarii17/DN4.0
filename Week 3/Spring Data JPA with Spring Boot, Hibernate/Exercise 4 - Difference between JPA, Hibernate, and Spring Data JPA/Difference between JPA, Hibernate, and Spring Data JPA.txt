 Hands-On 4: Difference between JPA, Hibernate, and Spring Data JPA
?? Java Persistence API (JPA)
JPA is a specification (JSR 338) for persisting, reading, and managing Java objects to and from a relational database.

It is not an implementation; it only defines the standards.

Common implementations of JPA include Hibernate, EclipseLink, etc.

?? Hibernate
Hibernate is a popular Object-Relational Mapping (ORM) tool.

It is a concrete implementation of JPA.

It handles database operations through mapping Java classes to database tables.

?? Spring Data JPA
It is not a JPA implementation, but rather a Spring-based abstraction layer on top of JPA.

Internally uses JPA implementations like Hibernate.

Reduces boilerplate code (like DAO implementation) by providing built-in repository interfaces.

Also handles transaction management, query derivation, pagination, and more.

?? Code Comparison
Hibernate (Manual Session Handling)
java
Copy
Edit
public Integer addEmployee(Employee employee) {
    Session session = factory.openSession();
    Transaction tx = null;
    Integer employeeID = null;

    try {
        tx = session.beginTransaction();
        employeeID = (Integer) session.save(employee); 
        tx.commit();
    } catch (HibernateException e) {
        if (tx != null) tx.rollback();
        e.printStackTrace(); 
    } finally {
        session.close(); 
    }
    return employeeID;
}
Spring Data JPA (Simplified Repository Usage)
EmployeeRepository.java

java
Copy
Edit
public interface EmployeeRepository extends JpaRepository<Employee, Integer> {
}
EmployeeService.java

java
Copy
Edit
@Autowired
private EmployeeRepository employeeRepository;

@Transactional
public void addEmployee(Employee employee) {
    employeeRepository.save(employee);
}
